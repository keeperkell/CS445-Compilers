stmtEnter

%type <tree> stmtEnter iterStmtEnter selectStmtEnter stmtEnd
%type <tree> stmtElse iterStmtElse selectStmtElse


stmt            : stmtEnter                 { $$ = $1; } 
                | stmtElse                  { $$ = $1; }

stmtEnter       : iterStmtEnter             { $$ = $1; }
                | selectStmtEnter           { $$ = $1; }

iterStmtEnter   : WHILE simpleExp DO stmtEnter                  { $$ = newStmtNode(WhileK, $1);
                                                                   $$->child[0] = $2;
                                                                   $$->child[1] = $4;
                                                                 }
                | FOR ID ASGN iterRange DO stmtEnter             { $$ = newStmtNode(ForK, $1);
                                                                   $$->attr.name = $3->tokeninput;
                                                                   $$->child[0] = newDeclNode(VarK, $2);
                                                                   $$->child[0]->expType = Integer;
                                                                   $$->child[1] = $4;
                                                                   $$->child[2] = $6;
                                                                 }

selectStmtEnter : IF simpleExp THEN stmtEnter                    { $$ = newStmtNode(IfK, $1); 
                                                                   $$->child[0] = $2;
                                                                   $$->child[1] = $4; 
                                                                 }
                | IF simpleExp THEN stmt ELSE stmtEnter          { $$ = newStmtNode(IfK, $1); 
                                                                   $$->child[0] = $2;
                                                                   $$->child[1] = $4;
                                                                   $$->child[2] = $6;                // POSSIBLE DANGLING ELSE
                                                                 }  

stmtElse        : iterStmtElse              { $$ = $1; }
                | selectStmtElse            { $$ = $1; }

iterStmtElse    :

selectStmtElse  :

stmtEnd         : 

////////////////////////////////////////////////////////////////////////////////////
// From pre dangling else Fix
////////////////////////////////////////////////////////////////////////////////////
stmt          : expStmt                                          { $$ = $1; }
              | compoundStmt                                     { $$ = $1; }
              | selectStmt                                       { $$ = $1; }
              | iterStmt                                         { $$ = $1; }
              | returnStmt                                       { $$ = $1; }
              | breakStmt                                        { $$ = $1; }
              ;

////////////////////////////////////////////////////////////////////////////////////
// V2 of dangling else fix 
////////////////////////////////////////////////////////////////////////////////////

%type <tree> stmtEnter iterStmtEnter selectStmtEnter stmtEnd
%type <tree> stmtElse iterStmtElse selectStmtElse

stmt          : stmtEnter                                        { $$ = $1; }           // Fix for dangling else
              | stmtElse                                         { $$ = $1; }
              ;

stmtEnter     : IF simpleExp THEN stmtEnter ELSE stmtEnter       { $$ = newStmtNode(IfK, $1); 
                                                                   $$->child[0] = $2;
                                                                   $$->child[1] = $4;
                                                                   $$->child[2] = $6;
                                                                 } 
              | WHILE simpleExp DO stmtEnter                     { $$ = newStmtNode(WhileK, $1);
                                                                   $$->child[0] = $2;
                                                                   $$->child[1] = $4;
                                                                   $$->attr.name = $1->tokeninput;
                                                                 }
              | FOR ID ASGN iterRange DO stmtEnter               { $$ = newStmtNode(ForK, $1);
                                                                   $$->child[0] = newDeclNode(VarK, $2);
                                                                   $$->child[0]->expType = Integer;
                                                                   $$->child[1] = $4;
                                                                   $$->child[2] = $6;
                                                                   $$->attr.name = $3->tokeninput;
                                                                 }
              | stmtEnd                                          { $$ = $1; }
              ;

stmtElse      : IF simpleExp THEN stmt                           { $$ = newStmtNode(IfK, $1); 
                                                                   $$->child[0] = $2;
                                                                   $$->child[1] = $4; 
                                                                 }
              | IF simpleExp THEN stmtEnter ELSE stmtElse        { $$ = newStmtNode(IfK, $1); 
                                                                   $$->child[0] = $2;
                                                                   $$->child[1] = $4;
                                                                   $$->child[2] = $6; 
                                                                 } 
              | WHILE simpleExp DO stmtElse                      { $$ = newStmtNode(WhileK, $1);
                                                                   $$->child[0] = $2;
                                                                   $$->child[1] = $4;
                                                                   $$->attr.name = $1->tokeninput;
                                                                 }
              | FOR ID ASGN iterRange DO stmtElse                { $$ = newStmtNode(ForK, $1);
                                                                   $$->attr.name = $3->tokeninput;
                                                                   $$->child[0] = newDeclNode(VarK, $2);
                                                                   $$->child[0]->expType = Integer;
                                                                   $$->child[1] = $4;
                                                                   $$->child[2] = $6;
                                                                 }
              ;

stmtEnd       : expStmt                                          { $$ = $1; }
              | compoundStmt                                     { $$ = $1; }
              | returnStmt                                       { $$ = $1; }
              | breakStmt                                        { $$ = $1; }
              ;