Func: main returns type void [line: 1]
.   Child: 1  Compound [line: 2]
.   .   Child: 0  Var: n of type int [line: 3]
.   .   Child: 1  While [line: 5]
.   .   .   Child: 0  Const true [line: 5]
.   .   .   Child: 1  Compound [line: 5]
.   .   .   .   Child: 1  Assign: <- [line: 6]
.   .   .   .   .   Child: 0  Id: n [line: 6]
.   .   .   .   .   Child: 1  Call: input [line: 6]
.   .   .   .   Sibling: 1  If [line: 7]
.   .   .   .   .   Child: 0  Op: < [line: 7]
.   .   .   .   .   .   Child: 0  Id: n [line: 7]
.   .   .   .   .   .   Child: 1  Const 2 [line: 7]
.   .   .   .   .   Child: 1  Break [line: 7]
.   .   .   .   Sibling: 2  While [line: 9]
.   .   .   .   .   Child: 0  Op: = [line: 9]
.   .   .   .   .   .   Child: 0  Op: % [line: 9]
.   .   .   .   .   .   .   Child: 0  Id: n [line: 9]
.   .   .   .   .   .   .   Child: 1  Const 2 [line: 9]
.   .   .   .   .   .   Child: 1  Const 0 [line: 9]
.   .   .   .   .   Child: 1  Compound [line: 9]
.   .   .   .   .   .   Child: 1  Call: output [line: 10]
.   .   .   .   .   .   .   Child: 0  Const 2 [line: 10]
.   .   .   .   .   .   Sibling: 1  Assign: /= [line: 11]
.   .   .   .   .   .   .   Child: 0  Id: n [line: 11]
.   .   .   .   .   .   .   Child: 1  Const 2 [line: 11]
.   .   .   .   Sibling: 3  For [line: 14]
.   .   .   .   .   Child: 0  Var: i of type int [line: 14]
.   .   .   .   .   Child: 1  Range [line: 14]
.   .   .   .   .   .   Child: 0  Const 3 [line: 14]
.   .   .   .   .   .   Child: 1  Id: n [line: 14]
.   .   .   .   .   .   Child: 2  Const 2 [line: 14]
.   .   .   .   .   Child: 2  Compound [line: 14]
.   .   .   .   .   .   Child: 1  If [line: 15]
.   .   .   .   .   .   .   Child: 0  Op: > [line: 15]
.   .   .   .   .   .   .   .   Child: 0  Op: * [line: 15]
.   .   .   .   .   .   .   .   .   Child: 0  Id: i [line: 15]
.   .   .   .   .   .   .   .   .   Child: 1  Id: i [line: 15]
.   .   .   .   .   .   .   .   Child: 1  Id: n [line: 15]
.   .   .   .   .   .   .   Child: 1  Break [line: 15]
.   .   .   .   .   .   Sibling: 1  While [line: 16]
.   .   .   .   .   .   .   Child: 0  Op: = [line: 16]
.   .   .   .   .   .   .   .   Child: 0  Op: % [line: 16]
.   .   .   .   .   .   .   .   .   Child: 0  Id: n [line: 16]
.   .   .   .   .   .   .   .   .   Child: 1  Id: i [line: 16]
.   .   .   .   .   .   .   .   Child: 1  Const 0 [line: 16]
.   .   .   .   .   .   .   Child: 1  Compound [line: 16]
.   .   .   .   .   .   .   .   Child: 1  Call: output [line: 17]
.   .   .   .   .   .   .   .   .   Child: 0  Id: i [line: 17]
.   .   .   .   .   .   .   .   Sibling: 1  Assign: /= [line: 18]
.   .   .   .   .   .   .   .   .   Child: 0  Id: n [line: 18]
.   .   .   .   .   .   .   .   .   Child: 1  Id: i [line: 18]
.   .   .   .   Sibling: 4  If [line: 21]
.   .   .   .   .   Child: 0  Op: > [line: 21]
.   .   .   .   .   .   Child: 0  Id: n [line: 21]
.   .   .   .   .   .   Child: 1  Const 1 [line: 21]
.   .   .   .   .   Child: 1  Call: output [line: 21]
.   .   .   .   .   .   Child: 0  Id: n [line: 21]
.   .   .   .   Sibling: 5  Call: outnl [line: 22]
