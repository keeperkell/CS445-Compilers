Var: x of array of type int [line: 1]
Sibling: 1  Var: y of type int [line: 1]
Sibling: 2  Var: z of type int [line: 1]
Sibling: 3  Func: dog returns type int [line: 2]
.   Child: 0  Parm: a of array of type int [line: 2]
.   Sibling: 1  Parm: b of type int [line: 2]
.   Sibling: 2  Parm: c of type char [line: 2]
.   Child: 1  Compound [line: 2]
.   .   Child: 1  Return [line: 2]
.   .   .   Child: 0  Id: b [line: 2]
Sibling: 4  Func: fox returns type int [line: 3]
.   Child: 0  Parm: civet of type int [line: 3]
.   Child: 1  Compound [line: 3]
.   .   Child: 0  Var: i of type int [line: 4]
.   .   Child: 1  If [line: 6]
.   .   .   Child: 0  Op: > [line: 6]
.   .   .   .   Child: 0  Id: civet [line: 6]
.   .   .   .   Child: 1  Const 3 [line: 6]
.   .   .   Child: 1  Return [line: 6]
.   .   .   .   Child: 0  Id: x [line: 6]
.   .   .   Child: 2  Return [line: 6]
.   .   .   .   Child: 0  Id: y [line: 6]
.   .   Sibling: 1  Assign: <- [line: 7]
.   .   .   Child: 0  Id: i [line: 7]
.   .   .   Child: 1  Const 0 [line: 7]
.   .   Sibling: 2  While [line: 8]
.   .   .   Child: 0  Op: < [line: 8]
.   .   .   .   Child: 0  Id: i [line: 8]
.   .   .   .   Child: 1  Const 10 [line: 8]
.   .   .   Child: 1  Assign: ++ [line: 8]
.   .   .   .   Child: 0  Id: i [line: 8]
